// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	organization "github.com/pebruwantoro/hackathon-efishery/internal/app/usecase/organization"
	mock "github.com/stretchr/testify/mock"
)

// OrganizationUsecase is an autogenerated mock type for the OrganizationUsecase type
type OrganizationUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *OrganizationUsecase) Create(ctx context.Context, req organization.CreateUpdateOrganizationRequest) (organization.OrganizationResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 organization.OrganizationResponse
	if rf, ok := ret.Get(0).(func(context.Context, organization.CreateUpdateOrganizationRequest) organization.OrganizationResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(organization.OrganizationResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, organization.CreateUpdateOrganizationRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *OrganizationUsecase) GetById(ctx context.Context, id uint) (organization.OrganizationResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 organization.OrganizationResponse
	if rf, ok := ret.Get(0).(func(context.Context, uint) organization.OrganizationResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(organization.OrganizationResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrganizationUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrganizationUsecase creates a new instance of OrganizationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrganizationUsecase(t mockConstructorTestingTNewOrganizationUsecase) *OrganizationUsecase {
	mock := &OrganizationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
