// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/pebruwantoro/hackathon-efishery/internal/app/entity"
	mock "github.com/stretchr/testify/mock"
)

// Organization is an autogenerated mock type for the Organization type
type Organization struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Organization) Create(ctx context.Context, _a1 *entity.Organization) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Organization) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, _a1
func (_m *Organization) Delete(ctx context.Context, _a1 *entity.Organization) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Organization) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *Organization) GetAll(ctx context.Context) ([]entity.Organization, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Organization
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Organization) GetById(ctx context.Context, id uint) (entity.Organization, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Organization
	if rf, ok := ret.Get(0).(func(context.Context, uint) entity.Organization); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *Organization) Update(ctx context.Context, _a1 *entity.Organization) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Organization) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrganization interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrganization creates a new instance of Organization. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrganization(t mockConstructorTestingTNewOrganization) *Organization {
	mock := &Organization{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
