// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// RestClient is an autogenerated mock type for the RestClient type
type RestClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, path, header, requestBody
func (_m *RestClient) Delete(ctx context.Context, path string, header http.Header, requestBody []byte) ([]byte, int, error) {
	ret := _m.Called(ctx, path, header, requestBody)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, http.Header, []byte) []byte); ok {
		r0 = rf(ctx, path, header, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, http.Header, []byte) int); ok {
		r1 = rf(ctx, path, header, requestBody)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, http.Header, []byte) error); ok {
		r2 = rf(ctx, path, header, requestBody)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, path, header
func (_m *RestClient) Get(ctx context.Context, path string, header http.Header) ([]byte, int, error) {
	ret := _m.Called(ctx, path, header)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, http.Header) []byte); ok {
		r0 = rf(ctx, path, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, http.Header) int); ok {
		r1 = rf(ctx, path, header)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, http.Header) error); ok {
		r2 = rf(ctx, path, header)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Patch provides a mock function with given fields: ctx, path, header, requestBody
func (_m *RestClient) Patch(ctx context.Context, path string, header http.Header, requestBody []byte) ([]byte, int, error) {
	ret := _m.Called(ctx, path, header, requestBody)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, http.Header, []byte) []byte); ok {
		r0 = rf(ctx, path, header, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, http.Header, []byte) int); ok {
		r1 = rf(ctx, path, header, requestBody)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, http.Header, []byte) error); ok {
		r2 = rf(ctx, path, header, requestBody)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Post provides a mock function with given fields: ctx, path, header, requestBody
func (_m *RestClient) Post(ctx context.Context, path string, header http.Header, requestBody []byte) ([]byte, int, error) {
	ret := _m.Called(ctx, path, header, requestBody)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, http.Header, []byte) []byte); ok {
		r0 = rf(ctx, path, header, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, http.Header, []byte) int); ok {
		r1 = rf(ctx, path, header, requestBody)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, http.Header, []byte) error); ok {
		r2 = rf(ctx, path, header, requestBody)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Put provides a mock function with given fields: ctx, path, header, requestBody
func (_m *RestClient) Put(ctx context.Context, path string, header http.Header, requestBody []byte) ([]byte, int, error) {
	ret := _m.Called(ctx, path, header, requestBody)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, http.Header, []byte) []byte); ok {
		r0 = rf(ctx, path, header, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, http.Header, []byte) int); ok {
		r1 = rf(ctx, path, header, requestBody)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, http.Header, []byte) error); ok {
		r2 = rf(ctx, path, header, requestBody)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewRestClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRestClient creates a new instance of RestClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRestClient(t mockConstructorTestingTNewRestClient) *RestClient {
	mock := &RestClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
